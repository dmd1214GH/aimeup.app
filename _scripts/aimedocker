#!/usr/bin/env zsh
set -euo pipefail

# Repo root
REPO_PATH="$(cd "$(dirname "$0")/.." && pwd)"
export REPO_PATH

# Load project env (aliases, PATH, NODE_OPTIONS, .env.local)
source "$REPO_PATH/_scripts/aimeup-env.sh"

# Change to monorepo directory
cd "$REPO_PATH"

# On macOS host, set window and font size for better visibility
if [[ "$OSTYPE" == "darwin"* ]] && [[ ! -f /.dockerenv ]]; then
  osascript <<OSA
tell application "Terminal"
  tell front window
    set number of rows to 40
    set number of columns to 120
    set font size of current settings to 12
  end tell
end tell
OSA
fi

# Show Docker status
echo "==================================== Docker Status ===================================="

# Check if Docker is running
if ! docker info &>/dev/null; then
  echo "‚ö†Ô∏è  Docker is not running. Starting Docker Desktop..."
  
  # Start Docker Desktop on macOS
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open -a Docker
    
    # Wait for Docker to be ready (max 60 seconds)
    echo "‚è≥ Waiting for Docker to start..."
    for i in {1..60}; do
      if docker info &>/dev/null; then
        echo "‚úÖ Docker is now running"
        break
      fi
      sleep 1
      if [[ $i -eq 60 ]]; then
        echo "‚ùå Docker failed to start after 60 seconds"
        echo "Please check Docker Desktop manually"
        exit 1
      fi
    done
  else
    echo "‚ùå Docker is not running!"
    echo "Please start Docker manually and try again."
    exit 1
  fi
else
  echo "‚úÖ Docker is running"
fi

# Check if container exists and is running
CONTAINER_STATUS=$(docker compose -f docker-compose.yml -f docker-compose.claude.yml ps -q aimeup-dev 2>/dev/null || true)

if [[ -z "$CONTAINER_STATUS" ]]; then
  echo "üîÑ Starting Docker container..."
  docker compose -f docker-compose.yml -f docker-compose.claude.yml up -d
  echo "‚è≥ Waiting for container to be ready..."
  sleep 2
else
  # Check if container is actually running (not just exists)
  if ! docker compose -f docker-compose.yml -f docker-compose.claude.yml ps | grep -q "aimeup-dev.*running"; then
    echo "üîÑ Container exists but is stopped. Starting..."
    docker compose -f docker-compose.yml -f docker-compose.claude.yml start aimeup-dev
    sleep 2
  else
    echo "‚úÖ Container is already running"
  fi
fi

# Show container info
echo -e "\n==================================== Container Info ===================================="
docker compose -f docker-compose.yml -f docker-compose.claude.yml ps

echo -e "\n==================================== üê≥ Docker Container ===================================="
echo "üìç Working directory: /aimeup"
echo "üìù Quick commands: pnpm install, pnpm dev, pnpm build, pnpm test"
echo "üîö Type 'exit' to leave the container"
echo -e "\nüî¥ DOCKER ENVIRONMENT - Not your host machine!"
echo ""

# Set terminal color to medium gray right before entering Docker
# Note: Terminal.app doesn't support separate title bar colors
term-color mediumgray

# Attach to container with interactive zsh shell (with history support)
# Use exec -it to get an interactive terminal
# Note: We can't filter stderr here as it would break interactive mode
# IMPORTANT: Don't exit on error from docker exec to prevent terminal crashes
set +e
docker compose -f docker-compose.yml -f docker-compose.claude.yml exec -it aimeup-dev /bin/zsh
DOCKER_EXIT_CODE=$?
set -e

# After exiting the container, restore terminal to white
echo -e "\n==================================== Exited Docker ===================================="
term-color white

if [[ $DOCKER_EXIT_CODE -ne 0 ]]; then
    echo "‚ö†Ô∏è  Docker session ended with exit code: $DOCKER_EXIT_CODE"
else
    echo "‚úÖ Returned to host machine"
fi