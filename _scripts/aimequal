#!/usr/bin/env zsh
set -euo pipefail

# Repo root
REPO_PATH="$(cd "$(dirname "$0")/.." && pwd)"
cd "$REPO_PATH"

# Create .temp directory if it doesn't exist
mkdir -p .temp

# Generate timestamp
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
OUTPUT_FILE=".temp/aimequal.${TIMESTAMP}.txt"

# Prune old aimequal files (keep last 20)
echo "Pruning old aimequal output files..."
cd .temp
if ls aimequal.*.txt 1> /dev/null 2>&1; then
    ls -t aimequal.*.txt | tail -n +21 | xargs rm -f 2>/dev/null || true
    echo "Kept last 20 aimequal output files"
else
    echo "No old aimequal files to prune"
fi
cd ..

echo "Running aimequal tests at $(date)"
echo "Output will be saved to: $OUTPUT_FILE"
echo "=========================================="

# Function to run command and capture output
run_test() {
    local test_name="$1"
    local command="$2"
    
    echo "Running: $test_name"
    echo "Command: $command"
    echo "------------------------------------------"
    
    # Run command and capture output
    local output
    output=$(eval "$command" 2>&1)
    local exit_code=$?
    
    # Write output to file and display
    echo "$output" | tee -a "$OUTPUT_FILE"
    
    # Check for errors - use exit code for Playwright tests, pattern matching for others
    local is_playwright_test=false
    if [[ "$test_name" == *"E2E"* ]]; then
        is_playwright_test=true
    fi
    
    if [[ $is_playwright_test == true ]]; then
        # For Playwright tests, trust the exit code
        if [[ $exit_code -eq 0 ]]; then
            echo "✅ $test_name: PASSED"
            echo "------------------------------------------"
        else
            echo "❌ $test_name: FAILED"
            echo "Check $OUTPUT_FILE for details"
            exit 1
        fi
    else
        # For other tests, check output for error patterns AND check for "Oops! Something went wrong"
        if [[ $exit_code -eq 0 ]] && ! echo "$output" | grep -q "error\|Error\|ERROR\|✖\|failed\|Failed\|FAILED\|Oops! Something went wrong"; then
            echo "✅ $test_name: PASSED"
            echo "------------------------------------------"
        else
            echo "❌ $test_name: FAILED"
            echo "Check $OUTPUT_FILE for details"
            exit 1
        fi
    fi
}

# Check if web server is running, start if needed
check_and_start_web_server() {
    if lsof -i :8081 > /dev/null 2>&1; then
        echo "Web server already running on port 8081"
        WEB_SERVER_PID=""
    else
        echo "Starting web server for E2E tests..."
        cd apps/eatgpt
        BROWSER=none pnpm web > /dev/null 2>&1 &
        WEB_SERVER_PID=$!
        cd ../..
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..30}; do
            if lsof -i :8081 > /dev/null 2>&1; then
                echo "Web server started successfully"
                break
            fi
            sleep 1
        done
        
        if ! lsof -i :8081 > /dev/null 2>&1; then
            echo "Failed to start web server"
            exit 1
        fi
    fi
}

# Cleanup function
cleanup() {
    if [[ -n "${WEB_SERVER_PID:-}" ]]; then
        echo "Stopping web server (PID: $WEB_SERVER_PID)..."
        kill $WEB_SERVER_PID 2>/dev/null || true
    fi
}

# Set up cleanup trap
trap cleanup EXIT

# Run tests sequentially, fail fast
run_test "Unit Tests" "pnpm test"
run_test "Code Quality" "pnpm hygiene"

# Run Playwright E2E tests if they exist (with browser kungfu!)
if [[ -f "apps/eatgpt/playwright.config.ts" ]]; then
    check_and_start_web_server
    # Run smoke test only - single browser navigating all pages
    run_test "Web E2E Smoke Test" "cd apps/eatgpt && HEADED=true SLOW_MO=500 pnpm test:smoke:web"
fi

echo "=========================================="
echo "All tests completed successfully!"
echo "Full output saved to: $OUTPUT_FILE"
